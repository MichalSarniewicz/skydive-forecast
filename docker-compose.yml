services:
  postgres-user:
    image: postgres:15-alpine
    container_name: skydive-postgres-user
    environment:
      POSTGRES_DB: skydive_forecast_user_db
      POSTGRES_USER: skydive_forecast_user
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
      - ../skydive-forecast-user-service/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skydive_forecast_user -d skydive_forecast_user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skydive-network

  postgres-analysis:
    image: postgres:15-alpine
    container_name: skydive-postgres-analysis
    environment:
      POSTGRES_DB: skydive_forecast_analysis_db
      POSTGRES_USER: skydive_forecast_analysis
      POSTGRES_PASSWORD: pass
    ports:
      - "5433:5432"
    volumes:
      - postgres-analysis-data:/var/lib/postgresql/data
      - ../skydive-forecast-analysis-service/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skydive_forecast_analysis -d skydive_forecast_analysis_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skydive-network

  postgres-location:
    image: postgres:15-alpine
    container_name: skydive-postgres-location
    environment:
      POSTGRES_DB: skydive_forecast_location_db
      POSTGRES_USER: skydive_forecast_location
      POSTGRES_PASSWORD: pass
    ports:
      - "5434:5432"
    volumes:
      - postgres-location-data:/var/lib/postgresql/data
      - ../skydive-forecast-location-service/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skydive_forecast_location -d skydive_forecast_location_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skydive-network

  redis:
    image: redis:7-alpine
    container_name: skydive-redis
    command: redis-server --requirepass pass --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skydive-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: skydive-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - skydive-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: skydive-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - skydive-network

  prometheus:
    image: prom/prometheus:latest
    container_name: skydive-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - skydive-network

  loki:
    image: grafana/loki:latest
    container_name: skydive-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - skydive-network

  grafana:
    image: grafana/grafana:latest
    container_name: skydive-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
      - zipkin
    networks:
      - skydive-network

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: skydive-zipkin
    ports:
      - "9411:9411"
    networks:
      - skydive-network

  gateway:
    build:
      context: ../skydive-forecast-gateway
      dockerfile: Dockerfile
    container_name: skydive-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CLOUD_GATEWAY_SERVER_WEBMVC_ROUTES[0].URI: http://user-service:8081
      SPRING_CLOUD_GATEWAY_SERVER_WEBMVC_ROUTES[1].URI: http://analysis-service:8082
      SPRING_CLOUD_GATEWAY_SERVER_WEBMVC_ROUTES[2].URI: http://location-service:8083
      SPRING_CLOUD_GATEWAY_SERVER_WEBMVC_ROUTES[3].URI: http://user-service:8081
      SPRING_CLOUD_GATEWAY_SERVER_WEBMVC_ROUTES[4].URI: http://analysis-service:8082
      SPRING_CLOUD_GATEWAY_SERVER_WEBMVC_ROUTES[5].URI: http://location-service:8083
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      LOKI_URL: http://loki:3100/loki/api/v1/push
    depends_on:
      user-service:
        condition: service_healthy
      analysis-service:
        condition: service_healthy
      location-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - skydive-network

  user-service:
    build:
      context: ../skydive-forecast-user-service
      dockerfile: Dockerfile
    container_name: skydive-user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/skydive_forecast_user_db
      SPRING_DATASOURCE_USERNAME: skydive_forecast_user
      SPRING_DATASOURCE_PASSWORD: pass
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: skydive_forecast_user
      SPRING_LIQUIBASE_DEFAULT_SCHEMA: skydive_forecast_user
      SPRING_LIQUIBASE_CONTEXTS: seed
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JWT_SECRET: hK8nX2mP9qR5vT3wL7bE4jY6cA1dF8sZ
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      LOKI_URL: http://loki:3100/loki/api/v1/push
    depends_on:
      postgres-user:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - skydive-network

  analysis-service:
    build:
      context: ../skydive-forecast-analysis-service
      dockerfile: Dockerfile
    container_name: skydive-analysis-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-analysis:5432/skydive_forecast_analysis_db
      SPRING_DATASOURCE_USERNAME: skydive_forecast_analysis
      SPRING_DATASOURCE_PASSWORD: pass
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: skydive_forecast_analysis
      SPRING_LIQUIBASE_DEFAULT_SCHEMA: skydive_forecast_analysis
      SPRING_LIQUIBASE_CONTEXTS: seed
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: pass
      SPRING_DATA_REDIS_TIMEOUT: 2000ms
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LOCATION_SERVICE_URL: http://location-service:8083
      JWT_SECRET: hK8nX2mP9qR5vT3wL7bE4jY6cA1dF8sZ
      RESILIENCE4J_CIRCUITBREAKER_INSTANCES_MYSERVICE_SLIDINGWINDOWSIZE: 10
      RESILIENCE4J_CIRCUITBREAKER_INSTANCES_MYSERVICE_FAILURERATETHRESHOLD: 50
      RESILIENCE4J_CIRCUITBREAKER_INSTANCES_MYSERVICE_WAITDURATIONINOPENSTATE: 100
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      LOKI_URL: http://loki:3100/loki/api/v1/push
    depends_on:
      postgres-analysis:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - skydive-network

  location-service:
    build:
      context: ../skydive-forecast-location-service
      dockerfile: Dockerfile
    container_name: skydive-location-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-location:5432/skydive_forecast_location_db
      SPRING_DATASOURCE_USERNAME: skydive_forecast_location
      SPRING_DATASOURCE_PASSWORD: pass
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: skydive_forecast_location
      SPRING_LIQUIBASE_DEFAULT_SCHEMA: skydive_forecast_location
      SPRING_LIQUIBASE_CONTEXTS: seed
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: pass
      SPRING_DATA_REDIS_TIMEOUT: 2000ms
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JWT_SECRET: hK8nX2mP9qR5vT3wL7bE4jY6cA1dF8sZ
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      LOKI_URL: http://loki:3100/loki/api/v1/push
    depends_on:
      postgres-location:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - skydive-network

networks:
  skydive-network:
    driver: bridge

volumes:
  postgres-user-data:
  postgres-analysis-data:
  postgres-location-data:
  redis-data:
  prometheus-data:
  grafana-data:
  loki-data: